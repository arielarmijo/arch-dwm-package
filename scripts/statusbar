#!/bin/bash

############################# Variables ########################################

# Icons for indicators (DejaVuSans Nerd Fonts)
boot_icon=""
root_icon=""
home_icon=""
cpu_icon="﬙"
ram_icon="菉"
load_icon=""
temp_icon=""
cal_icon=""
clock_icon=""
sep=" | "

# Date and time format
date_format="%a^f3^%d^f3^%b^f3^%Y"
time_format="%H:%M"

# Thresholds
disk_usage_max=95
cpu_usage_max=95
cpu_load_max=4.00
cpu_temp_max=75
# https://batteryuniversity.com/learn/article/how_to_prolong_lithium_based_batteries
bat_danger=20
bat_warning=45

# Colors
red="^c#FF0000^"
yellow="^c#FFA500^"
green="^c#228B22^"
gray="^c#bbbbbb^"


############################# Functions ########################################

function kb_layout {
	#https://github.com/nonpop/xkblayout-state
	layout="$(~/.local/bin/xkblayout-state print %s)"
	variant="$(~/.local/bin/xkblayout-state print %v)"
	mayus="$(xset q | awk '/Caps Lock/ {print $4}')"
	if [ "$mayus" = "on" ]; then
		layout="${layout^^}"
		variant="${variant^^}"
	fi
	output="$layout"
	if [ -n "$variant" ]; then
		output+="^f4^$variant"
	fi
	echo "$output"
}

function disk_usage {
	case $1 in
		/ )
			icon=$root_icon
			usage="$(df -h | awk '{ if ($6 == "/") print $5 }')"
			;;
		/boot )
			icon=$boot_icon
			usage="$(df -h | awk '{ if ($6 == "/boot") print $5 }')"
			;;
		/efi )
			icon=$boot_icon
				usage="$(df -h | awk '{ if ($6 == "/efi") print $5 }')"
			;;
		/home )
			icon=$home_icon
			usage="$(df -h | awk '{ if ($6 == "/home") print $5 }')"
			;;
	esac

	if [ ${usage%?} -ge $disk_usage_max ]; then
		printf "%s" "$red$icon^f4^$usage$gray"
	else
		printf "%s" "$icon^f4^$usage"
	fi
}

new=(0 0 0 0 0 0 0 0 0 0)
function cpu_usage {
	prev=("${new[@]}")
	new=($(sed -n 's/^cpu\s\s//p' /proc/stat))
#	echo "      user nice system idle iowait  irq  softirq steal guest guest_nice"
#	echo "prev: ${prev[@]}"
#	echo "new:  ${new[@]}"
	total_time=$(( (${new[0]} + ${new[1]} + ${new[2]} +${new[3]} + ${new[4]} + ${new[5]} + ${new[6]} + ${new[7]}) \
	- \
	(${prev[0]} + ${prev[1]} + ${prev[2]} +${prev[3]} + ${prev[4]} + ${prev[5]} + ${prev[6]} + ${prev[7]}) ))
	total_idle=$(( (${new[3]}+${new[4]}) - (${prev[3]}+${prev[4]}) ))
	total_usage=$(($total_time - $total_idle))
	usage=$(($total_usage*100/$total_time))
#	echo "cpu: $usage%"

	if [ $usage -ge $cpu_usage_max ]; then
		status+="$red$cpu_icon^f4^$usage%$gray"
	else
		status+="$cpu_icon^f4^$usage%"
	fi
}

function cpu_load {

	load_1m="$(cat /proc/loadavg | awk '{print $1}')"
	load_5m="$(cat /proc/loadavg | awk '{print $2}')"
	load_15m="$(cat /proc/loadavg | awk '{print $3}')"

	if (($(echo "$load_1m > $cpu_load_max" | bc -l))) || \
	   (($(echo "$load_5m > $cpu_load_max" | bc -l))) || \
	   (($(echo "$load_15m > $cpu_load_max" | bc -l))); then
		printf "%s" "$red$load_icon$gray^f6^"
	else
		printf "%s" "$load_icon^f6^"
	fi
	
	if (( $(echo "$load_1m > $cpu_load_max" | bc -l) )); then
		printf "%s" "$red$load_1m$gray^f6^"
	else
		printf "%s" "$load_1m^f6^"
	fi

	if (( $(echo "$load_5m > $cpu_load_max" | bc -l) )); then
		printf "%s" "$red$load_5m$gray^f6^"
	else
		printf "%s" "$load_5m^f6^"
	fi

	if (( $(echo "$load_15m > $cpu_load_max" | bc -l) )); then
		printf "%s" "$red$load_15m$gray"
	else
		printf "%s" "$load_15m"
	fi

}

function cpu_temp {
	temp=$(cat /sys/class/hwmon/hwmon5/temp1_input | cut -b 1-2)
	if [ $temp -ge $cpu_temp_max ]; then
		printf "%s°C" "$red$temp_icon^f4^$temp$gray"
	else
		printf "%s°C" "$temp_icon^f4^$temp"
	fi
}

function ram_used() {
	used=$(awk '$1=="MemTotal:" {total=$2}
				$1=="MemFree:" {free=$2}
				$1=="Buffers:" {buffers=$2}
				$1=="Cached:" {cached=$2}
				$1=="Shmem:" {shmem=$2}
				$1=="SReclaimable:" {reclaimable=$2}
				END {printf "%.0f%%", (total+shmem-free-buffers-cached-reclaimable)*100/total}' /proc/meminfo)
	printf "%s" "$ram_icon^f4^$used"
}

function bat_status {

	bat_capacity=$(cat /sys/class/power_supply/BAT0/capacity)
	bat_status=$(cat /sys/class/power_supply/BAT0/status)
	ac_status=$(cat /sys/class/power_supply/AC0/online)

	if [ "$bat_status" = "Charging" ]; then
		if (($bat_capacity < 15));then
			bat_icon=""
		elif (($bat_capacity < 30));then
			bat_icon=""
		elif (($bat_capacity < 45));then
			bat_icon=""
		elif (($bat_capacity < 60));then
			bat_icon=""
		elif (($bat_capacity < 75));then
			bat_icon=""
		elif (($bat_capacity < 90));then
			bat_icon=""
		elif (($bat_capacity < 98));then
			bat_icon=""
		else
			bat_icon=""
		fi
	elif [ "$bat_status" = "Not charging" ]; then
			bat_icon=""
	else
		if (($bat_capacity < 5));then
			bat_icon=""
		elif (($bat_capacity >= 5 && $bat_capacity < 15));then
			bat_icon=""
		elif (($bat_capacity >= 15 && $bat_capacity < 25));then
			bat_icon=""
		elif (($bat_capacity >= 25 && $bat_capacity < 35));then
			bat_icon=""
		elif (($bat_capacity >= 35 && $bat_capacity < 45));then
			bat_icon=""
		elif (($bat_capacity >= 45 && $bat_capacity < 55));then
			bat_icon=""
		elif (($bat_capacity >= 55 && $bat_capacity < 65));then
			bat_icon=""
		elif (($bat_capacity >= 65 && $bat_capacity < 75));then
			bat_icon=""
		elif (($bat_capacity >= 75 && $bat_capacity < 85));then
			bat_icon=""
		elif (($bat_capacity >= 85 && $bat_capacity < 98));then
			bat_icon=""
		elif (($bat_capacity >= 98));then
			bat_icon=""
		fi 
	fi

	if (($bat_capacity <= $bat_danger)); then
		printf "%s" "$red$bat_icon^f4^$bat_capacity%$gray"
	elif (($bat_capacity <= $bat_warning)); then
		printf "%s" "$yellow$bat_icon^f4^$bat_capacity%$gray"
	else
		printf "%s" "$bat_icon^f4^$bat_capacity%"
	fi
}

function date_time {
	date=$(date +"$date_format")
	time=$(date +"$time_format")
	printf "%s" "$cal_icon^f5^$date $clock_icon^f5^$time"
}


############################ Main #####################################################

while true; do
	status=""
	status+="$(kb_layout)"
	status+="$sep"
	status+="$(disk_usage /efi)"
	status+="^f8^"
	status+="$(disk_usage /)"
	status+="^f8^"
	status+="$(disk_usage /home)"
	status+="$sep"
	cpu_usage
	status+="^f8^"
	status+="$(cpu_load)"
	status+="^f8^"
	status+="$(cpu_temp)"
	status+="$sep"
	status+="$(ram_used)"
	status+="$sep"
	status+="$(bat_status)"
	status+="$sep"
	status+="$(date_time)"
	status+="^f6^"
	#echo -e "$status"
	xsetroot -name "$status"
	sleep 5
done &
